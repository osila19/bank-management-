#include <iostream>
#include <vector>

using namespace std;

class bankAccount {
private:
    string name;
    int accountNumber;
    double balance;

public:
   // Constructor to initialize account details
    bankAccount(string n, int accNum, double bal) : name(n), accountNumber(accNum), balance(bal) {}

    // Deposit function
    void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            cout << "Deposit successful! New balance: " << balance << endl;
        } else {
            cout << "Invalid deposit amount!" << endl;
        }
    }

    // Check if balance is sufficient
    bool checkBalance(double amount) {
        return balance >= amount;
    }

    // Withdraw function
    void withdraw(double amount) {
        if (checkBalance(amount)) {
            balance -= amount;
            cout << "Withdrawal successful! New balance: " << balance << endl;
        } else {
            cout << "Insufficient funds!" << endl;
        }
    }

    // Transfer function
    void transfer(double amount, bankAccount &receiver) {
        if (checkBalance(amount)) {
            balance -= amount;
            receiver.deposit(amount);
            cout << "Transfer successful! New balance: " << balance << endl;
        } else {
            cout << "Insufficient funds for transfer!" << endl;
        }
    }

    // Get account number
    int getAccountNumber() {
        return accountNumber;
    }
};

// Bank class to manage multiple accounts
class bank {
private:
    vector<bankAccount> accounts;// List of bank accounts

    public:
    // Create new account
    void createAccount(string name, double balance, int accountNumber) {
        accounts.push_back(bankAccount(name, accountNumber, balance));// Add new account to the list
        cout << "Account created successfully!\n";
    }

    // Find an account
    bankAccount* findAccount(int accountNumber) {
        for (auto &account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                return &account;// Return pointer to the account if found
            }
        }
        return nullptr;// Return nullptr if account not found
    }
};

// Menu system
void menu(bank &myBank) {
    int accountNumber;

    while (true) {
        cout << "\nEnter your account number (or -1 to exit): ";
        cin >> accountNumber;

        if (accountNumber == -1) break;  // Exit condition
        
        // Search for the entered account number
        bankAccount* userAccount = myBank.findAccount(accountNumber);

        if (userAccount == nullptr) {
            cout << "Account not found. Try again.\n";
            continue;// Ask for input again
        }

        while (true) {
            cout << "\n--- Bank Menu ---";
            cout << "\n1. Deposit";
            cout << "\n2. Withdraw";
            cout << "\n3. Transfer";
            cout << "\n4. Exit to main menu";
            cout << "\nChoose an option: ";

            int choice;
            cin >> choice;

            if (choice == 4) break;  // Exit to account selection

            switch (choice) {
                case 1: {
                    double amount;
                    cout << "Enter deposit amount: ";
                    cin >> amount;
                    userAccount->deposit(amount);
                    break;
                }
            
                case 2: {
                    double amount;
                    cout << "Enter withdrawal amount: ";
                    cin >> amount;
                    userAccount->withdraw(amount);
                    break;
                }
            
                case 3: {
                    double amount;
                    int receiverAccount;
                    cout << "Enter receiver's account number: ";
                    cin >> receiverAccount;
                    bankAccount* receiver = myBank.findAccount(receiverAccount);
            
                    if (receiver == nullptr) {
                        cout << "Receiver account not found!\n";
                    } else {
                        cout << "Enter transfer amount: ";
                        cin >> amount;
                        userAccount->transfer(amount, *receiver);
                    }
                    break;
                }
            
                default:
                    cout << "Invalid choice. Try again.\n";
                   
            }
        }
    }
};

// Main function
int main() {
    bank myBank;

    // Adding some test accounts
    myBank.createAccount("Alice", 1500, 111);
    myBank.createAccount("Bob", 2000, 222);

    // Start the menu system
    menu(myBank);

    cout << "Thank you for using our bank system!\n";
    return 0;
}
